#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TheWay1._0
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TheWay")]
	public partial class ModelDataInterfaceDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPAIR(PAIR instance);
    partial void UpdatePAIR(PAIR instance);
    partial void DeletePAIR(PAIR instance);
    partial void InsertSTATUSS(STATUSS instance);
    partial void UpdateSTATUSS(STATUSS instance);
    partial void DeleteSTATUSS(STATUSS instance);
    partial void InsertPOSITION(POSITION instance);
    partial void UpdatePOSITION(POSITION instance);
    partial void DeletePOSITION(POSITION instance);
    partial void InsertRESULT(RESULT instance);
    partial void UpdateRESULT(RESULT instance);
    partial void DeleteRESULT(RESULT instance);
    #endregion
		
		public ModelDataInterfaceDataContext() : 
				base(global::TheWay1._0.Properties.Settings.Default.TheWayConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataInterfaceDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataInterfaceDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataInterfaceDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataInterfaceDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PAIR> PAIRs
		{
			get
			{
				return this.GetTable<PAIR>();
			}
		}
		
		public System.Data.Linq.Table<STATUSS> STATUSSes
		{
			get
			{
				return this.GetTable<STATUSS>();
			}
		}
		
		public System.Data.Linq.Table<POSITION> POSITIONs
		{
			get
			{
				return this.GetTable<POSITION>();
			}
		}
		
		public System.Data.Linq.Table<RESULT> RESULTs
		{
			get
			{
				return this.GetTable<RESULT>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PAIR")]
	public partial class PAIR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _PairName;
		
		private EntitySet<POSITION> _POSITIONs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPairNameChanging(string value);
    partial void OnPairNameChanged();
    #endregion
		
		public PAIR()
		{
			this._POSITIONs = new EntitySet<POSITION>(new Action<POSITION>(this.attach_POSITIONs), new Action<POSITION>(this.detach_POSITIONs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PairName", DbType="VarChar(10)")]
		public string PairName
		{
			get
			{
				return this._PairName;
			}
			set
			{
				if ((this._PairName != value))
				{
					this.OnPairNameChanging(value);
					this.SendPropertyChanging();
					this._PairName = value;
					this.SendPropertyChanged("PairName");
					this.OnPairNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PAIR_POSITION", Storage="_POSITIONs", ThisKey="ID", OtherKey="IdPair")]
		public EntitySet<POSITION> POSITIONs
		{
			get
			{
				return this._POSITIONs;
			}
			set
			{
				this._POSITIONs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_POSITIONs(POSITION entity)
		{
			this.SendPropertyChanging();
			entity.PAIR = this;
		}
		
		private void detach_POSITIONs(POSITION entity)
		{
			this.SendPropertyChanging();
			entity.PAIR = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STATUSS")]
	public partial class STATUSS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _StatusName;
		
		private EntitySet<POSITION> _POSITIONs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStatusNameChanging(string value);
    partial void OnStatusNameChanged();
    #endregion
		
		public STATUSS()
		{
			this._POSITIONs = new EntitySet<POSITION>(new Action<POSITION>(this.attach_POSITIONs), new Action<POSITION>(this.detach_POSITIONs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusName", DbType="VarChar(10)")]
		public string StatusName
		{
			get
			{
				return this._StatusName;
			}
			set
			{
				if ((this._StatusName != value))
				{
					this.OnStatusNameChanging(value);
					this.SendPropertyChanging();
					this._StatusName = value;
					this.SendPropertyChanged("StatusName");
					this.OnStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STATUSS_POSITION", Storage="_POSITIONs", ThisKey="ID", OtherKey="IdStatus")]
		public EntitySet<POSITION> POSITIONs
		{
			get
			{
				return this._POSITIONs;
			}
			set
			{
				this._POSITIONs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_POSITIONs(POSITION entity)
		{
			this.SendPropertyChanging();
			entity.STATUSS = this;
		}
		
		private void detach_POSITIONs(POSITION entity)
		{
			this.SendPropertyChanging();
			entity.STATUSS = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.POSITIONS")]
	public partial class POSITION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _IdPair;
		
		private System.Nullable<int> _IdStatus;
		
		private System.Nullable<System.DateTime> _DateOpen;
		
		private System.Nullable<double> _Entryprice;
		
		private System.Nullable<double> _Stoploss;
		
		private System.Nullable<double> _TakeProfit;
		
		private System.Data.Linq.Binary _ImageBinary;
		
		private string _NoteOpen;
		
		private string _NoteClosed;
		
		private System.Nullable<int> _IdResult;
		
		private EntityRef<PAIR> _PAIR;
		
		private EntityRef<STATUSS> _STATUSS;
		
		private EntityRef<RESULT> _RESULT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIdPairChanging(System.Nullable<int> value);
    partial void OnIdPairChanged();
    partial void OnIdStatusChanging(System.Nullable<int> value);
    partial void OnIdStatusChanged();
    partial void OnDateOpenChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOpenChanged();
    partial void OnEntrypriceChanging(System.Nullable<double> value);
    partial void OnEntrypriceChanged();
    partial void OnStoplossChanging(System.Nullable<double> value);
    partial void OnStoplossChanged();
    partial void OnTakeProfitChanging(System.Nullable<double> value);
    partial void OnTakeProfitChanged();
    partial void OnImageBinaryChanging(System.Data.Linq.Binary value);
    partial void OnImageBinaryChanged();
    partial void OnNoteOpenChanging(string value);
    partial void OnNoteOpenChanged();
    partial void OnNoteClosedChanging(string value);
    partial void OnNoteClosedChanged();
    partial void OnIdResultChanging(System.Nullable<int> value);
    partial void OnIdResultChanged();
    #endregion
		
		public POSITION()
		{
			this._PAIR = default(EntityRef<PAIR>);
			this._STATUSS = default(EntityRef<STATUSS>);
			this._RESULT = default(EntityRef<RESULT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPair", DbType="Int")]
		public System.Nullable<int> IdPair
		{
			get
			{
				return this._IdPair;
			}
			set
			{
				if ((this._IdPair != value))
				{
					if (this._PAIR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPairChanging(value);
					this.SendPropertyChanging();
					this._IdPair = value;
					this.SendPropertyChanged("IdPair");
					this.OnIdPairChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdStatus", DbType="Int")]
		public System.Nullable<int> IdStatus
		{
			get
			{
				return this._IdStatus;
			}
			set
			{
				if ((this._IdStatus != value))
				{
					if (this._STATUSS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdStatusChanging(value);
					this.SendPropertyChanging();
					this._IdStatus = value;
					this.SendPropertyChanged("IdStatus");
					this.OnIdStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOpen", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOpen
		{
			get
			{
				return this._DateOpen;
			}
			set
			{
				if ((this._DateOpen != value))
				{
					this.OnDateOpenChanging(value);
					this.SendPropertyChanging();
					this._DateOpen = value;
					this.SendPropertyChanged("DateOpen");
					this.OnDateOpenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entryprice", DbType="Float")]
		public System.Nullable<double> Entryprice
		{
			get
			{
				return this._Entryprice;
			}
			set
			{
				if ((this._Entryprice != value))
				{
					this.OnEntrypriceChanging(value);
					this.SendPropertyChanging();
					this._Entryprice = value;
					this.SendPropertyChanged("Entryprice");
					this.OnEntrypriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stoploss", DbType="Float")]
		public System.Nullable<double> Stoploss
		{
			get
			{
				return this._Stoploss;
			}
			set
			{
				if ((this._Stoploss != value))
				{
					this.OnStoplossChanging(value);
					this.SendPropertyChanging();
					this._Stoploss = value;
					this.SendPropertyChanged("Stoploss");
					this.OnStoplossChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TakeProfit", DbType="Float")]
		public System.Nullable<double> TakeProfit
		{
			get
			{
				return this._TakeProfit;
			}
			set
			{
				if ((this._TakeProfit != value))
				{
					this.OnTakeProfitChanging(value);
					this.SendPropertyChanging();
					this._TakeProfit = value;
					this.SendPropertyChanged("TakeProfit");
					this.OnTakeProfitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageBinary", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ImageBinary
		{
			get
			{
				return this._ImageBinary;
			}
			set
			{
				if ((this._ImageBinary != value))
				{
					this.OnImageBinaryChanging(value);
					this.SendPropertyChanging();
					this._ImageBinary = value;
					this.SendPropertyChanged("ImageBinary");
					this.OnImageBinaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoteOpen", DbType="NVarChar(200)")]
		public string NoteOpen
		{
			get
			{
				return this._NoteOpen;
			}
			set
			{
				if ((this._NoteOpen != value))
				{
					this.OnNoteOpenChanging(value);
					this.SendPropertyChanging();
					this._NoteOpen = value;
					this.SendPropertyChanged("NoteOpen");
					this.OnNoteOpenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoteClosed", DbType="NVarChar(200)")]
		public string NoteClosed
		{
			get
			{
				return this._NoteClosed;
			}
			set
			{
				if ((this._NoteClosed != value))
				{
					this.OnNoteClosedChanging(value);
					this.SendPropertyChanging();
					this._NoteClosed = value;
					this.SendPropertyChanged("NoteClosed");
					this.OnNoteClosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdResult", DbType="Int")]
		public System.Nullable<int> IdResult
		{
			get
			{
				return this._IdResult;
			}
			set
			{
				if ((this._IdResult != value))
				{
					if (this._RESULT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdResultChanging(value);
					this.SendPropertyChanging();
					this._IdResult = value;
					this.SendPropertyChanged("IdResult");
					this.OnIdResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PAIR_POSITION", Storage="_PAIR", ThisKey="IdPair", OtherKey="ID", IsForeignKey=true)]
		public PAIR PAIR
		{
			get
			{
				return this._PAIR.Entity;
			}
			set
			{
				PAIR previousValue = this._PAIR.Entity;
				if (((previousValue != value) 
							|| (this._PAIR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PAIR.Entity = null;
						previousValue.POSITIONs.Remove(this);
					}
					this._PAIR.Entity = value;
					if ((value != null))
					{
						value.POSITIONs.Add(this);
						this._IdPair = value.ID;
					}
					else
					{
						this._IdPair = default(Nullable<int>);
					}
					this.SendPropertyChanged("PAIR");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STATUSS_POSITION", Storage="_STATUSS", ThisKey="IdStatus", OtherKey="ID", IsForeignKey=true)]
		public STATUSS STATUSS
		{
			get
			{
				return this._STATUSS.Entity;
			}
			set
			{
				STATUSS previousValue = this._STATUSS.Entity;
				if (((previousValue != value) 
							|| (this._STATUSS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STATUSS.Entity = null;
						previousValue.POSITIONs.Remove(this);
					}
					this._STATUSS.Entity = value;
					if ((value != null))
					{
						value.POSITIONs.Add(this);
						this._IdStatus = value.ID;
					}
					else
					{
						this._IdStatus = default(Nullable<int>);
					}
					this.SendPropertyChanged("STATUSS");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RESULT_POSITION", Storage="_RESULT", ThisKey="IdResult", OtherKey="ID", IsForeignKey=true)]
		public RESULT RESULT
		{
			get
			{
				return this._RESULT.Entity;
			}
			set
			{
				RESULT previousValue = this._RESULT.Entity;
				if (((previousValue != value) 
							|| (this._RESULT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RESULT.Entity = null;
						previousValue.POSITIONs.Remove(this);
					}
					this._RESULT.Entity = value;
					if ((value != null))
					{
						value.POSITIONs.Add(this);
						this._IdResult = value.ID;
					}
					else
					{
						this._IdResult = default(Nullable<int>);
					}
					this.SendPropertyChanged("RESULT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RESULT")]
	public partial class RESULT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NameResult;
		
		private EntitySet<POSITION> _POSITIONs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameResultChanging(string value);
    partial void OnNameResultChanged();
    #endregion
		
		public RESULT()
		{
			this._POSITIONs = new EntitySet<POSITION>(new Action<POSITION>(this.attach_POSITIONs), new Action<POSITION>(this.detach_POSITIONs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameResult", DbType="VarChar(5)")]
		public string NameResult
		{
			get
			{
				return this._NameResult;
			}
			set
			{
				if ((this._NameResult != value))
				{
					this.OnNameResultChanging(value);
					this.SendPropertyChanging();
					this._NameResult = value;
					this.SendPropertyChanged("NameResult");
					this.OnNameResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RESULT_POSITION", Storage="_POSITIONs", ThisKey="ID", OtherKey="IdResult")]
		public EntitySet<POSITION> POSITIONs
		{
			get
			{
				return this._POSITIONs;
			}
			set
			{
				this._POSITIONs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_POSITIONs(POSITION entity)
		{
			this.SendPropertyChanging();
			entity.RESULT = this;
		}
		
		private void detach_POSITIONs(POSITION entity)
		{
			this.SendPropertyChanging();
			entity.RESULT = null;
		}
	}
}
#pragma warning restore 1591
